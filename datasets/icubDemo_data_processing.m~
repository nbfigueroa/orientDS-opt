%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%        Data Processing Script      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
clear all; clc; close all

% Load Data from Michael's Demonstrations
load('rawdata_icubwMichael')

% Trajectories to use
raw_data(1:3) = [];
raw_data(2) = [];

data = []; 
odata = [];
window_size = 1051; crop_size = (window_size+1)/2; 
dt = raw_data{1}.dt;

pre_subsample = 2;
for i=1:length(raw_data)
        ee_pose = raw_data{i}.ee_pose;
        dx_nth = sgolay_time_derivatives(ee_pose(1:3,:)', dt, 2, 2, window_size);
        X     = dx_nth(:,:,1)';
        X_dot = dx_nth(:,:,2)';    
        q     = ee_pose(4:end,crop_size:end-crop_size);
        
        % Trim data with zero-velocity
        zero_vel_idx = [];
        for ii=1:length(X_dot)
            if (norm(X_dot(:,ii)) < 1e-4)
                zero_vel_idx = [zero_vel_idx ii];
            end
        end
        fprintf('Measurements removed %d \n', length(zero_vel_idx));
        X(:,zero_vel_idx) = [];
        X_dot(:,zero_vel_idx) = [];  
        q(:,zero_vel_idx) = [];
       
        data{i} = [X(:,1:pre_subsample:end); X_dot(:,1:pre_subsample:end)];                
        qdata{i} = q(:,1:pre_subsample:end);
        
        R = quaternion(qdata{i},1);
        Rdata{i} = R;
        
        % Populate H matrix
        H = zeros(4,4,size(R,3));
        for r=1:length(R)            
            H(:,:,r)     = eye(4);
            H(1:3,1:3,r) = R(:,:,r);
            H(1:3,4,r)   = data{i}(1:3,r) ;            
        end
        Hdata{i} = H;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%     Sub-sample measurements and Process for Learning      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
sub_sample = 5;
[Data, Data_sh, att, x0_all, dt, data, Hdata] = processDataStructureOrient(data, Hdata, sub_sample);

%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Visualize 6DoF data in 3d %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Extract Position and Velocities
M          = size(Data,1)/2;    
Xi_ref     = Data(1:M,:);
Xi_dot_ref = Data(M+1:end,:); 


%%%%% Plot 3D Position/Velocity Trajectories %%%%%
vel_samples = 50; vel_size = 0.75; 
[h_data, h_att, h_vel] = plot_reference_trajectories_DS(Data, att, vel_samples, vel_size); 
hold on;

%%%%%% Plot Wall %%%%%%
% cornerpoints = [-1 1 0;  5 1 0; 5 2 0; -1 2 0;
%                 -1 1 0.25;  5 1 0.25; 5 2 0.25; -1 2 0.25];            
% plotminbox(cornerpoints,[0.5 0.5 0.5]); hold on;


%%%%% Plot 6DoF trajectories %%%%%
ori_samples = 300; frame_size = 0.25; box_size = [0.45 0.15 0.05];
plot_6DOF_reference_trajectories(Hdata, ori_samples, frame_size, box_size); 

